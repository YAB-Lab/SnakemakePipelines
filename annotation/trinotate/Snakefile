"""
Author: Y. Ahmed-Braimah
--- Annotate a transcriptome with Trinotate
"""

import json
import os
import re
from os.path import join, basename, dirname
from os import getcwd
from subprocess import check_output

##--------------------------------------------------------------------------------------##
## Functions
##--------------------------------------------------------------------------------------##

# To print process messages
def message(x):
  print()

# To remove suffix from a string
def rstrip(text, suffix):
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

## define environment variables

##--------------------------------------------------------------------------------------##
## Global config files:
##--------------------------------------------------------------------------------------##

configfile: 'config.yml'

# Full path to an uncompressed FASTA file with all chromosome sequences.
DNA = config['DNA']
GTF = config['GTF']

# files/paths required for Trinotate
UNIPROT = config['UNIPROT']
CUSTOM = config['CUSTOM']
PFAM = config['PFAM']
SQLITE = config['SQLITE']
RNAMMER = config['RNAMMER']

# Full path to a folder where final output files will be deposited.
OUT_DIR = config['OUT_DIR']
HOME_DIR = config['HOME_DIR']

## Create the final output directory if it doesn't already exist
if not os.path.exists(OUT_DIR):
            os.makedirs(OUT_DIR)

##--------------------------------------------------------------------------------------##
#
# _____ _             _               _               _
#|  ___(_)_ __   __ _| |   ___  _   _| |_ _ __  _   _| |_ ___
#| |_  | | '_ \ / _` | |  / _ \| | | | __| '_ \| | | | __/ __|
#|  _| | | | | | (_| | | | (_) | |_| | |_| |_) | |_| | |_\__ \
#|_|   |_|_| |_|\__,_|_|  \___/ \__,_|\__| .__/ \__,_|\__|___/
#                                        |_|
##--------------------------------------------------------------------------------------##

## Final expected output(s)
rule all:
    input:
        join(OUT_DIR, 'Trinotate', 'Trinotate_report.xls.gene_ontology')

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##
#
# _____     _             _        _
#|_   _| __(_)_ __   ___ | |_ __ _| |_ ___
#  | || '__| | '_ \ / _ \| __/ _` | __/ _ \
#  | || |  | | | | | (_) | || (_| | ||  __/
#  |_||_|  |_|_| |_|\___/ \__\__,_|\__\___|
#
#
##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##


## extract transcriptome sequences from the genome using the StringTie assembly
rule gffread_exons:
    input:
        gtf = GTF,
        dna = DNA
    output:
        exons = join(OUT_DIR, 'sequences', 'stringtie_transcripts.fa'),
        gff3 = join(OUT_DIR, 'sequences', 'stringtie_transcripts.gff3')
    threads:
        2
    resources:
        mem_mb=4000
    message:
        """--- Extracting exon sequences from the genome using the GTF file """
    conda:
        'envs/trinotate.yml'
    shell:
        'gffread {input.gtf}'
                ' -g {input.dna}'
                ' -w {output.exons}'
        ' && gtf_to_alignment_gff3.pl {input.gtf} > {output.gff3}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule gene_trans_map:
    input:
        gtf = GTF
    output:
        geneTransMap = join(OUT_DIR, 'StringTie', '{genome}', 'stringtie_merged_gene_trans_map')
    threads:
        2
    message:
        """--- Producing gene-transcript map"""
    shell:
        'awk \'{{if ($3 == "transcript") print $10"\t"$12}}\' {input.gtf} | sed "s/;//g" | sed "s/\\\"//g" | sort -u > {output.geneTransMap}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## predict long ORFs with TransDecoder
rule Transdecoder_LongOrfs:
    input:
        exons = rules.gffread_exons.output.exons,
        tmap = rules.gene_trans_map.output.geneTransMap
    output:
        longOrfs = join(OUT_DIR, 'TransDecoder', 'transdecoder_dir/longest_orfs.pep')
    log:
        join(OUT_DIR, 'TransDecoder', 'LOGS', 'Transdecoder_LongOrfs.log')
    benchmark:
        join(OUT_DIR, 'TransDecoder', 'benchmarks', 'Transdecoder_LongOrfs.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=16000
    message:
        """--- Extracting long ORFs with TransDecoder """
    conda:
        'envs/trinotate.yml'
    shell:
        'TransDecoder.LongOrfs'
                ' -t {input.exons}'
                ' --gene_trans_map {input.tmap}'
                ' -m 50'
                ' --output_dir ' + join(OUT_DIR, 'TransDecoder', 'transdecoder_dir') +
                ' > {log} 2>&1'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## protein blast initial long ORFs against UniProt database
rule BLASTp_init:
    input:
        longOrfs = rules.Transdecoder_LongOrfs.output.longOrfs
    params:
        uniprot = UNIPROT
    output:
        blastpI = join(OUT_DIR, 'Trinotate', 'BLAST_results', 'BLASTp_init.outfmt6')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'BLASTp_init.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Initial BLASTp for TransDecoder """
    conda:
        'envs/blast.yml'    
    run:
        'blastp'
                ' -query {input.longOrfs}'
                ' -db {params.uniprot}'
                ' -max_target_seqs 1'
                ' -outfmt 6'
                ' -evalue 1e-5'
                ' -num_threads 8'
                ' > {output.blastpI}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## search initial long ORFs against Pfam rotein domains using HMMER
rule Pfam_init: #need hmmscan installed locally
    input:
        longOrfs = rules.Transdecoder_LongOrfs.output.longOrfs,
        pfam = PFAM
    output:
         pfamI = join(OUT_DIR, 'Trinotate', 'Pfam_results', 'pfam_i.domtblout')
    log:
        join(OUT_DIR, 'Trinotate', 'LOGS', 'Pfam_init.log')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'Pfam_init.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Initial Pfam search for TransDecoder """
    run:
        shell('hmmscan'
                ' --cpu 8'
                ' --domtblout {output.pfamI}'
                ' {input.pfam}'
                ' {input.longOrfs} > {log} 2>&1')


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## integrate the Blast and Pfam search results into coding region selection
rule Transdecoder_Predict:
    input:
        exons = rules.gffread_exons.output.exons,
        blastpI = rules.BLASTp_init.output.blastpI,
        pfamI = rules.Pfam_init.output.pfamI
    output:
        TransGff3 = join(OUT_DIR, 'TransDecoder', 'stringtie_transcripts.fa.transdecoder.gff3'),
        peptides = join(OUT_DIR, 'TransDecoder', 'stringtie_transcripts.fa.transdecoder.pep')
    log:
        join(OUT_DIR, 'TransDecoder', 'LOGS', 'Transdecoder_Predict.log')
    benchmark:
        join(OUT_DIR, 'TransDecoder', 'benchmarks', 'Transdecoder_Predict.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Final ORF prediction """
    conda:
        'envs/trinotate.yml' 
    shell:
        'TransDecoder.Predict'
                ' -t {input.exons}'
                ' --retain_pfam_hits {input.pfamI}'
                ' --retain_blastp_hits {input.blastpI}'
                ' --output_dir ' + join(OUT_DIR, 'TransDecoder', 'transdecoder_dir') +
                ' > {log} 2>&1'
        'mv stringtie_transcripts.fa.transdecoder.* ' + join(OUT_DIR, 'TransDecoder')


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##
## blast transcripts to UniProt database
rule BLASTx:
    input:
        exons = rules.gffread_exons.output.exons
    params:
        uniprot = UNIPROT
    output:
        blastX = join(OUT_DIR, 'Trinotate', 'BLAST_results', 'swissprot.blastx.outfmt6')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'BLASTx.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Transcript search against SwissProt (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        'blastx'
                ' -query {input.exons}'
                ' -db {params.uniprot}'
                ' -num_threads 16'
                ' -max_target_seqs 1'
                ' -outfmt 6'
                ' > {output.blastX}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast proteins to UniProt database
rule BLASTp:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        uniprot = UNIPROT
    output:
        blastP = join(OUT_DIR, 'Trinotate', 'BLAST_results', 'swissprot.blastp.outfmt6')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'BLASTp.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Peptide search against SwissProt (BLASTp)"""
    conda:
        'envs/blast.yml'
    shell:
        'blastp'
                ' -query {input.peptides}'
                ' -db {input.uniprot}'
                ' -num_threads 16'
                ' -max_target_seqs 1'
                ' -outfmt 6'
                ' > {output.blastP}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast transcripts to custom database
rule custom_BLASTx:
    input:
        exons = rules.gffread_exons.output.exons,
        custom = CUSTOM
    output:
        blastX = join(OUT_DIR, 'Trinotate', 'BLAST_results', 'custom.blastx.outfmt6')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'custom_BLASTx.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Transcript search against Custom database (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        'blastx'
                ' -query {input.exons}'
                ' -db {input.custom}'
                ' -num_threads 8'
                ' -max_target_seqs 1'
                ' -outfmt 6'
                ' > {output.blastX}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast proteins to custom database
rule custom_BLASTp:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        custom = CUSTOM
    output:
        blastP = join(OUT_DIR, 'Trinotate', 'BLAST_results', 'custom.blastp.outfmt6')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'custom_BLASTp.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Peptide search against Custom database (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        'blastp'
                ' -query {input.peptides}'
                ' -db {input.custom}'
                ' -num_threads 8'
                ' -max_target_seqs 1'
                ' -outfmt 6'
                ' > {output.blastP}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## run Pfam
rule Pfam:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        pfam = PFAM
    output:
        pfam_out = join(OUT_DIR, 'Trinotate', 'Pfam_results', 'TrinotatePFAM.out')
    log:
        join(OUT_DIR, 'Trinotate', 'LOGS', 'Pfam.log')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'Pfam.benchmark.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Pfam search with HMMSCAN """
    run:
        shell('hmmscan --cpu 16 --domtblout'
                ' {output.pfam_out}'
                ' {input.pfam}'
                ' {input.peptides}'
                ' > {log} 2>&1')

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## Identify signal peptides with SignalP
rule signalP:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides
    output:
        signalp = join(OUT_DIR, 'Trinotate', 'signalP.out')
    log:
        join(OUT_DIR, 'Trinotate', 'LOGS', 'signalp.log')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'signalp.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Signal peptide earch with signalP"""
    run:
        shell('/home/yahmed/software/signalp-4.1/signalp'
                ' -f short'
                ' -n {output.signalp}'
                ' {input.peptides}'
                ' > {log} 2>&1')

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## predict transmembrane domains with TMHMM
rule TMHMM:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides
    output:
        tmhmm = join(OUT_DIR, 'Trinotate', 'tmhmm.out')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'tmhmm.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Transmembrane domain prediction """
    run:
        shell('tmhmm --short <'
                ' {input.peptides}'
                ' > {output.tmhmm}')

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## identify rRNA loci with RNAmmer
rule RNAmmer:
    input:
        exons = rules.gffread_exons.output.exons,
        rnammer = RNAMMER
    output:
        rnammer = join(OUT_DIR, 'Trinotate', 'stringtie_transcripts.fa.rnammer.gff')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'rnammer.tsv')
    threads:
        8
    resources:
        mem_mb=16000
    message:
        """--- Find ribosomal RNA loci"""
    run:
        shell('/home/yahmed/software/Trinotate-Trinotate-v3.2.1/util/rnammer_support/RnammerTranscriptome.pl'
                ' --transcriptome {input.exons}'
                ' --path_to_rnammer {input.rnammer}')
        shell('mv stringtie_transcripts.fa.rnammer.gff ') + join(OUT_DIR, 'Trinotate', 'Dvir')


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## populate SQLite database with all annotation data
rule Trinotate:
    input:
        exons = rules.gffread_exons.output.exons,
        peptides = rules.Transdecoder_Predict.output.peptides,
        blastX = rules.BLASTx.output.blastX,
        blastP = rules.BLASTp.output.blastP,
        cBlastX = rules.custom_BLASTx.output.blastX,
        cBlastP = rules.custom_BLASTp.output.blastP,
        pfam = rules.Pfam.output.pfam_out,
        signalp = rules.signalP.output.signalp,
        tmhmm = rules.TMHMM.output.tmhmm,
        # rnammer = rules.RNAmmer.output.rnammer,
        tmap = rules.merge_assemblies.output.geneTransMap,
        sqlite = SQLITE
    output:
        Annot = join(OUT_DIR, 'Trinotate', 'Trinotate_report.xls'),
        AnnotGO = join(OUT_DIR, 'Trinotate', 'Trinotate_report.xls.gene_ontology')
    benchmark:
        join(OUT_DIR, 'Trinotate', 'benchmarks', 'trinotate.tsv')
    message:
        """--- Combining annotation outputs into SQLite database """
    run:
        shell('Trinotate {input.sqlite} init'
                ' --gene_trans_map {input.tmap}'
                ' --transcript_fasta {input.exons}'
                ' --transdecoder_pep {input.peptides}'
                ' && Trinotate {input.sqlite} LOAD_swissprot_blastp {input.blastP}'
                ' && Trinotate {input.sqlite} LOAD_swissprot_blastx {input.blastX}'
                ' && Trinotate {input.sqlite} LOAD_custom_blast --outfmt6 {input.cBlastP} --prog blastp --dbtype ' + os.path.basename(CUSTOM) +
                ' && Trinotate {input.sqlite} LOAD_custom_blast --outfmt6 {input.cBlastX} --prog blastx --dbtype ' + os.path.basename(CUSTOM) +
                ' && Trinotate {input.sqlite} LOAD_pfam {input.pfam}'
                ' && Trinotate {input.sqlite} LOAD_tmhmm {input.tmhmm}'
                ' && Trinotate {input.sqlite} LOAD_signalp {input.signalp}'
                # ' && Trinotate {input.sqlite} LOAD_rnammer {input.rnammer}'
                ' && Trinotate {input.sqlite} report > {output.Annot}')
        shell('/home/yahmed/software/Trinotate-Trinotate-v3.2.1/util/extract_GO_assignments_from_Trinotate_xls.pl --Trinotate_xls {output.Annot} -G -I > {output.AnnotGO}')
