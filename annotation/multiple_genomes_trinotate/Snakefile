"""
Author: Zethus Woon Avery
--- Annotate multiple transcriptomes with Trinotate
"""

import json
import os
import re
from os.path import join, basename, dirname
from os import getcwd
from subprocess import check_output

##--------------------------------------------------------------------------------------##
## Functions
##--------------------------------------------------------------------------------------##

# To print process messages
def message(x):
  print()

# To remove suffix from a string
def rstrip(text, suffix):
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

## define environment variables

##--------------------------------------------------------------------------------------##
## Global config files:
##--------------------------------------------------------------------------------------##

configfile: 'config.yml'

# # Full path to an uncompressed FASTA file with all chromosome sequences.
# DNA = config['DNA']
# GTF = config['GTF']

# files/paths required for Trinotate
UNIPROT = config['UNIPROT']
PFAM = config['PFAM']
CUSTOM = config['CUSTOM']

SQLITE = config['SQLITE']

SIGNALP_SCRIPT = config['SIGNALP_SCRIPT']
RNAMMER = config['RNAMMER']
RNAMMER_SCRIPT = config['RNAMMER_SCRIPT']
TRINOTATE_IMAGE = config['TRINOTATE_IMAGE']
TRINOTATE_SCRIPT = config['TRINOTATE_SCRIPT']
TRINOTATE_EXTRACT = config['TRINOTATE_EXTRACT']

# Full path to a folder where final output files will be deposited.
OUT_DIR = config['OUT_DIR']

## Create the final output directory if it doesn't already exist
if not os.path.exists(OUT_DIR):
            os.makedirs(OUT_DIR)

##--------------------------------------------------------------------------------------##
#
# _____ _             _               _               _
#|  ___(_)_ __   __ _| |   ___  _   _| |_ _ __  _   _| |_ ___
#| |_  | | '_ \ / _` | |  / _ \| | | | __| '_ \| | | | __/ __|
#|  _| | | | | | (_| | | | (_) | |_| | |_| |_) | |_| | |_\__ \
#|_|   |_|_| |_|\__,_|_|  \___/ \__,_|\__| .__/ \__,_|\__|___/
#                                        |_|
##--------------------------------------------------------------------------------------##

## Final expected output(s)
rule all:
    input:
        expand(join(OUT_DIR, '{genome}', 'Trinotate_report.tsv.gene_ontology'), genome = config['genomes'])

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##
#
# _____     _             _        _
#|_   _| __(_)_ __   ___ | |_ __ _| |_ ___
#  | || '__| | '_ \ / _ \| __/ _` | __/ _ \
#  | || |  | | | | | (_) | || (_| | ||  __/
#  |_||_|  |_|_| |_|\___/ \__\__,_|\__\___|
#
#
##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##


## extract transcriptome sequences from the genome using the StringTie assembly
rule gffread_exons:
    input:
        gtf = lambda wildcards: config['genomes'][wildcards.genome]['gtf'],
        fasta = lambda wildcards: config['genomes'][wildcards.genome]['fasta']
    params:
        intermediate_exons = temp(join(OUT_DIR, '{genome}', 'sequences', 'stringtie_transcripts_intermediate.fa'))
    output:
        exons = temp(join(OUT_DIR, '{genome}', 'sequences', 'stringtie_transcripts.fa')),
        gff3 = temp(join(OUT_DIR, '{genome}', 'sequences', 'stringtie_transcripts.gff3'))
    threads:
        2
    resources:
        mem_mb=4000
    message:
        """--- Extracting exon sequences from the genome using the GTF file """
    conda:
        'envs/trinotate.yml'
    shell:
        """
        gffread {input.gtf} -g {input.fasta} -w {params.intermediate_exons}
        cut -d " " -f1 {params.intermediate_exons} > {output.exons}
        gtf_to_alignment_gff3.pl {input.gtf} > {output.gff3}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule gene_trans_map:
    input:
        gtf = lambda wildcards: config['genomes'][wildcards.genome]['gtf']
    output:
        geneTransMap = temp(join(OUT_DIR, '{genome}', 'stringtie_merged_gene_trans_map'))
    threads:
        2
    message:
        """--- Producing gene-transcript map"""
    shell:
        """
        awk \'{{if ($3 == "exon") print $12"\t"$10}}\' {input.gtf} | sed "s/;//g" | sed "s/\\\"//g" | sort -u > {output.geneTransMap}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## predict long ORFs with TransDecoder
rule Transdecoder_LongOrfs:
    input:
        exons = rules.gffread_exons.output.exons,
        tmap = rules.gene_trans_map.output.geneTransMap
    params:
        output_dir = join(OUT_DIR, 'TransDecoder', 'transdecoder_dir', '{genome}')
    output:
        longOrfs = temp(join(OUT_DIR, '{genome}', 'TransDecoder', 'transdecoder_dir', 'longest_orfs.pep'))
    threads:
        8
    resources:
        mem_mb=16000
    message:
        """--- Extracting long ORFs with TransDecoder """
    conda:
        'envs/trinotate.yml'
    shell:
        """
        TransDecoder.LongOrfs -t {input.exons} -m 50 --output_dir {params.output_dir}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## protein blast initial long ORFs against UniProt database
rule BLASTp_init:
    input:
        longOrfs = rules.Transdecoder_LongOrfs.output.longOrfs
    params:
        uniprot = UNIPROT
    output:
        blastpI = temp(join(OUT_DIR, 'BLAST_results', '{genome}', 'BLASTp_init.outfmt6'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'BLASTp_init.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Initial BLASTp for TransDecoder """
    conda:
        'envs/blast.yml'    
    shell:
        """
        blastp -query {input.longOrfs} -db {params.uniprot} \
        -max_target_seqs 1 -outfmt 6 -evalue 1e-5 -num_threads 8 > {output.blastpI}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## search initial long ORFs against Pfam rotein domains using HMMER
rule Pfam_init:
    input:
        longOrfs = rules.Transdecoder_LongOrfs.output.longOrfs,
        pfam = PFAM
    output:
        pfamI = temp(join(OUT_DIR, 'Pfam_results', '{genome}', 'pfam_i.domtblout'))
    log:
        join(OUT_DIR, 'logs', '{genome}', 'Pfam_init.log')
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'Pfam_init.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Initial Pfam search for TransDecoder """
    conda:
        'envs/trinotate.yml' 
    shell:
        """
        hmmscan --cpu 8 --domtblout {output.pfamI} {input.pfam} {input.longOrfs} > {log} 2>&1
        """


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## integrate the Blast and Pfam search results into coding region selection
rule Transdecoder_Predict:
    input:
        exons = rules.gffread_exons.output.exons,
        blastpI = rules.BLASTp_init.output.blastpI,
        pfamI = rules.Pfam_init.output.pfamI
    params: 
        intermediate_dir = join(OUT_DIR, 'TransDecoder', 'transdecoder_dir', '{genome}'),
        output_dir = join(OUT_DIR, 'TransDecoder', '{genome}')
    output:
        TransGff3 = temp(join(OUT_DIR, 'TransDecoder', '{genome}', 'stringtie_transcripts.fa.transdecoder.gff3')),
        peptides = temp(join(OUT_DIR, 'TransDecoder', '{genome}', 'stringtie_transcripts.fa.transdecoder.pep'))
    log:
        join(OUT_DIR, 'logs', '{genome}', 'Transdecoder_Predict.log')
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'Transdecoder_Predict.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Final ORF prediction """
    conda:
        'envs/trinotate.yml' 
    shell:
        """
        TransDecoder.Predict -t {input.exons} --retain_pfam_hits {input.pfamI} --retain_blastp_hits {input.blastpI} --output_dir {params.output_dir} > {log} 2>&1
        mv stringtie_transcripts.fa.transdecoder.* {params.output_dir}
        """


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##
## blast transcripts to UniProt database
rule BLASTx:
    input:
        exons = rules.gffread_exons.output.exons
    params:
        uniprot = UNIPROT
    output:
        blastX = temp(join(OUT_DIR, 'BLAST_results', '{genome}', 'swissprot.blastx.outfmt6'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'BLASTx.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Transcript search against SwissProt (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        """
        blastx -query {input.exons} -db {params.uniprot} -num_threads 16 -max_target_seqs 1 -outfmt 6 > {output.blastX}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast proteins to UniProt database
rule BLASTp:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        uniprot = UNIPROT
    output:
        blastP = temp(join(OUT_DIR, 'BLAST_results', '{genome}', 'swissprot.blastp.outfmt6'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'BLASTp.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Peptide search against SwissProt (BLASTp)"""
    conda:
        'envs/blast.yml'
    shell:
        """
        blastp -query {input.peptides} -db {input.uniprot} \
        -num_threads 16 -max_target_seqs 1 -outfmt 6 > {output.blastP}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast transcripts to custom database
rule custom_BLASTx:
    input:
        exons = rules.gffread_exons.output.exons,
        custom = CUSTOM
    output:
        blastX = temp(join(OUT_DIR, 'BLAST_results', '{genome}', 'custom.blastx.outfmt6'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'custom_BLASTx.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Transcript search against Custom database (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        """
        blastx -query {input.exons} -db {input.custom} \
        -num_threads 8 -max_target_seqs 1 -outfmt 6 > {output.blastX}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## blast proteins to custom database
rule custom_BLASTp:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        custom = CUSTOM
    output:
        blastP = temp(join(OUT_DIR, 'BLAST_results', '{genome}', 'custom.blastp.outfmt6'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'custom_BLASTp.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Peptide search against Custom database (BLASTx)"""
    conda:
        'envs/blast.yml'
    shell:
        """
        blastp -query {input.peptides} -db {input.custom} \
        -num_threads 8 -max_target_seqs 1 -outfmt 6 > {output.blastP}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## run Pfam
rule Pfam:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        pfam = PFAM
    output:
        pfam_out = temp(join(OUT_DIR, 'Pfam_results', '{genome}', 'TrinotatePFAM.out'))
    log:
        join(OUT_DIR, 'logs', '{genome}', 'Pfam.log')
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'Pfam.benchmark.tsv')
    threads:
        16
    resources:
        mem_mb=32000
    message:
        """--- Pfam search with HMMSCAN """
    conda:
        'envs/trinotate.yml'
    shell:
        """
        hmmscan --cpu 16 --domtblout {output.pfam_out} {input.pfam} {input.peptides} > {log} 2>&1
        """ 

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## Identify signal peptides with SignalP
rule signalP:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        trinotate = TRINOTATE_IMAGE,
    params:
        signalp_script = SIGNALP_SCRIPT,
    output:
        signalp = temp(join(OUT_DIR, '{genome}', 'signalP.out'))
    log:
        join(OUT_DIR, 'logs', '{genome}', 'signalp.log')
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'signalp.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Signal peptide earch with signalP"""
    shell:
        """
        singularity exec -e {input.trinotate} {params.signalp_script} -f short -n {output.signalp} {input.peptides} > {log} 2>&1
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## predict transmembrane domains with TMHMM
rule TMHMM:
    input:
        peptides = rules.Transdecoder_Predict.output.peptides,
        trinotate = TRINOTATE_IMAGE
    output:
        tmhmm = temp(join(OUT_DIR, '{genome}', 'tmhmm.out'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'tmhmm.benchmark.tsv')
    threads:
        8
    resources:
        mem_mb=32000
    message:
        """--- Transmembrane domain prediction """
    conda:
        'envs/trinotate.yml'
    shell:
        """ 
        singularity exec -e {input.trinotate} tmhmm --short < {input.peptides} > {output.tmhmm}
        """

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## identify rRNA loci with RNAmmer
rule RNAmmer:
    input:
        exons = rules.gffread_exons.output.exons,
        rnammer = RNAMMER,
        trinotate = TRINOTATE_IMAGE
    params:
        rnammer_script = RNAMMER_SCRIPT,
        output_dir = join(OUT_DIR, 'Trinotate', '{genome}')
    output:
        rnammer = temp(join(OUT_DIR, '{genome}', 'stringtie_transcripts.fa.rnammer.gff'))
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'rnammer.tsv')
    threads:
        8
    resources:
        mem_mb=16000
    message:
        """--- Find ribosomal RNA loci"""
    conda:
        'envs/trinotate.yml'
    shell:
        """
        singularity exec -e {input.trinotate} {params.rnammer_script} --transcriptome {input.exons} --path_to_rnammer {input.rnammer}'
        mv stringtie_transcripts.fa.rnammer.gff {params.output_dir}
        """ 


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## create Trinotate directory
rule create_sqlite:
    input:
        sqlite = SQLITE
    output:
        sqlite_genome = join(OUT_DIR, '{genome}', '{genome}.sqlite')
    shell:
        """
        cp {input.sqlite} {output}
        """


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

## populate SQLite database with all annotation data
rule Trinotate:
    input:
        exons = rules.gffread_exons.output.exons,
        peptides = rules.Transdecoder_Predict.output.peptides,
        blastX = rules.BLASTx.output.blastX,
        blastP = rules.BLASTp.output.blastP,
        # cBlastX = rules.custom_BLASTx.output.blastX,
        # cBlastP = rules.custom_BLASTp.output.blastP,
        pfam = rules.Pfam.output.pfam_out,
        signalp = rules.signalP.output.signalp,
        tmhmm = rules.TMHMM.output.tmhmm,
        rnammer = rules.RNAmmer.output.rnammer,
        tmap = rules.gene_trans_map.output.geneTransMap,
        sqlite = rules.create_sqlite.output.sqlite_genome,
        trinotate = TRINOTATE_IMAGE
    params:
        trinotate_script = TRINOTATE_SCRIPT,
        trinotate_extract = TRINOTATE_EXTRACT
    output:
        Annot = join(OUT_DIR, '{genome}', 'Trinotate_report.tsv'),
        AnnotGO = join(OUT_DIR, '{genome}', 'Trinotate_report.tsv.gene_ontology')
    benchmark:
        join(OUT_DIR, 'benchmarks', '{genome}', 'trinotate.tsv')
    message:
        """--- Combining annotation outputs into SQLite database """
    conda:
        'envs/trinotate.yml'
    shell:
        """
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --init --gene_trans_map {input.tmap} --transcript_fasta {input.exons} --transdecoder_pep {input.peptides}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_swissprot_blastp {input.blastP}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_swissprot_blastx {input.blastX}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_pfam {input.pfam}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_tmhmm {input.tmhmm}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_signalp {input.signalp}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --LOAD_rnammer {input.rnammer}
        singularity exec -e {input.trinotate} {params.trinotate_script} --db {input.sqlite} --report > {output.Annot}
        singularity exec -e {input.trinotate} {params.trinotate_extract} --Trinotate_xls {output.Annot} -G -I > {output.AnnotGO}
        """