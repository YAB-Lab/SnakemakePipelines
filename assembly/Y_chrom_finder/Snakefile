"""
--- Snakemake workflow to run YGS
"""

import json
from os.path import join, basename, dirname
from os import getcwd
from subprocess import check_output

##--------------------------------------------------------------------------------------##
## Global config files: 
##--------------------------------------------------------------------------------------##

configfile: 'config.yml'


# Folder where final output files will be deposited.
OUT_DIR = config['OUT_DIR']

# load genome
genome = config['genome']

# input fastq files, for males and females separately
female_FILES = json.load(open(config['FEMALE_SAMPLES_JSON']))
female_SAMPLES = sorted(female_FILES.keys())

male_FILES = json.load(open(config['MALE_SAMPLES_JSON']))
male_SAMPLES = sorted(male_FILES.keys())

## Create the final output directory if it doesn't already exist
if not os.path.exists(OUT_DIR):
            os.makedirs(OUT_DIR)


##--------------------------------------------------------------------------------------##
## Functions
##--------------------------------------------------------------------------------------##

# To print process messages
def message(x):
  print()

# To remove suffix from a string
def rstrip(text, suffixes):
    if isinstance(suffixes, str):
        suffixes = [suffixes]
    for suffix in suffixes:
        if text.endswith(suffix):
            return text[:len(text) - len(suffix)]
    return text
##--------------------------------------------------------------------------------------##

## Final expected output(s)
rule all: 
    input:
        join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked_female_male.final_result.tsv'),
        join(OUT_DIR, 'MultiQC', 'multiqc_report.html'),
        # Build the per-sex extracts (so they exist to merge)
        expand(join(OUT_DIR, "Bowtie2", "{sample}.female_bamqc", "coverage_per_contig.tsv"),
               sample=female_SAMPLES),
        expand(join(OUT_DIR, "Bowtie2", "{sample}.male_bamqc", "coverage_per_contig.tsv"),
               sample=male_SAMPLES)

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule cutADAPT_female:
    input:
        r1 = lambda wildcards: female_FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: female_FILES[wildcards.sample]['R2']
    output:
        fastq1 = temp(join(OUT_DIR, 'female_trimmed_reads', '{sample}.R1.fastq.gz')),
        fastq2 = temp(join(OUT_DIR, 'female_trimmed_reads', '{sample}.R2.fastq.gz')),
        qc = join(OUT_DIR, 'female_trimmed_reads', '{sample}.qc.txt')
    params:
        # https://cutadapt.readthedocs.io/en/stable/guide.html#adapter-types
        adapters="-a CTGTCTCTTATACACATCT -A CTGTCTCTTATACACATCT",
        # https://cutadapt.readthedocs.io/en/stable/guide.html#
        extra="--minimum-length 50 -q 20"
    log:
        join(OUT_DIR, 'Logs', 'cutadapt', '{sample}.cutadapt.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'cutadapt', '{sample}.cutadapt.benchmark.tsv')
    message:
        """--- Trimming adaptors for female sample {wildcards.sample}."""
    threads:
        4
    resources:
        mem_mb=8000
    wrapper:
        "v3.10.2/bio/cutadapt/pe"

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule cutADAPT_male:
    input:
        r1 = lambda wildcards: male_FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: male_FILES[wildcards.sample]['R2']
    output:
        fastq1 = temp(join(OUT_DIR, 'male_trimmed_reads', '{sample}.R1.fastq.gz')),
        fastq2 = temp(join(OUT_DIR, 'male_trimmed_reads', '{sample}.R2.fastq.gz')),
        qc = join(OUT_DIR, 'male_trimmed_reads', '{sample}.qc.txt')
    params:
        # https://cutadapt.readthedocs.io/en/stable/guide.html#adapter-types
        adapters="-a CTGTCTCTTATACACATCT -A CTGTCTCTTATACACATCT",
        # https://cutadapt.readthedocs.io/en/stable/guide.html#
        extra="--minimum-length 50 -q 20"
    log:
        join(OUT_DIR, 'Logs', 'cutadapt', '{sample}.cutadapt.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'cutadapt', '{sample}.cutadapt.benchmark.tsv')
    message:
        """--- Trimming adaptors for male sample {wildcards.sample}."""
    threads:
        4
    resources:
        mem_mb=8000
    wrapper:
        "v3.10.2/bio/cutadapt/pe"

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule filter_female_reads_quality:
    input:
        fastq1 = join(OUT_DIR, 'female_trimmed_reads', '{sample}.R1.fastq.gz'),
        fastq2 = join(OUT_DIR, 'female_trimmed_reads', '{sample}.R2.fastq.gz')
    output:
        join(OUT_DIR, 'jellyfish', '{sample}.femaleKmers.jelly')
    log:
        join(OUT_DIR, 'Logs', '{sample}.filter_female_reads_quality.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.filter_female_reads_quality.benchmark.tsv')
    message: 
        """--- filtering female Illumina short reads and extract k-mers at Phred score of 20 """
    conda:
        'envs/Yfinder.yml'
    shell:
        'zcat {input.fastq1} {input.fastq2} > temp_female.fastq && '
                ' jellyfish count'
                ' -m 15'
                ' -o {output}'
                ' -c 4'
                ' -s 300M'
                ' -t 12'
                ' --canonical'
                ' --min-qual-char=5'
                ' temp_female.fastq && rm temp_female.fastq'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule female_kmer_fasta:
    input:
        fJelly = rules.filter_female_reads_quality.output
    output:
        join(OUT_DIR, 'kmer_fasta', '{sample}.female.fasta.gz')
    log:
        join(OUT_DIR, 'Logs', '{sample}.female_kmer_fasta.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.female_kmer_fasta.benchmark.tsv')
    message: 
        """--- filtering at a minimum frequency of 5, and production of the short read female fasta file """
    conda:
        'envs/Yfinder.yml'
    shell:
        'jellyfish dump'
                ' --lower-count=5'
                ' {input.fJelly} |'
                ' gzip -c >'
                ' {output}'
                ' 2> {log}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule female_bitarray:
    input:
        trace = expand(join(OUT_DIR, 'kmer_fasta', '{sample}.female.fasta.gz'), sample = female_SAMPLES)
    output:
        join(OUT_DIR, 'Bitarray', 'female.trace.gz')
    log:
        join(OUT_DIR, 'Logs', 'female_bitarray.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'female_bitarray.benchmark.tsv')
    message: 
        """--- production of the bitarray representing the female kmers """
    conda:
        'envs/Yfinder.yml'
    shell:
        'cp ' + join(OUT_DIR, 'kmer_fasta', '*.female.fasta.gz') + ' female.fasta.gz'
        ' && YGS.pl'
                ' kmer_size=15'
                ' mode=trace'
                ' trace=female.fasta.gz'
                ' > {log} 2>&1'
                ' && mv female.trace.gz {output}'
                ' && rm female.fasta.gz'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule filter_male_reads_quality:
    input:
        fastq1 = join(OUT_DIR, 'male_trimmed_reads', '{sample}.R1.fastq.gz'),
        fastq2 = join(OUT_DIR, 'male_trimmed_reads', '{sample}.R2.fastq.gz')
    output:
        join(OUT_DIR, 'jellyfish', '{sample}.maleKmers.jelly')
    log:
        join(OUT_DIR, 'Logs', '{sample}.filter_male_reads_quality.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.filter_male_reads_quality.benchmark.tsv')
    message: 
        """--- filtering male Illumina short reads and extract k-mers at Phred score of 20 """
    conda:
        'envs/Yfinder.yml'
    resources:
        mem_mb=12000
    shell:
        'zcat {input.fastq1} {input.fastq2} > temp_male.fastq && '
                ' jellyfish count'
                ' -m 15'
                ' -o {output}'
                ' -c 4'
                ' -s 300M'
                ' -t 12'
                ' --canonical'
                ' --min-qual-char=5'
                ' temp_male.fastq && rm temp_male.fastq'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule male_kmer_fasta:
    input:
        mJelly = rules.filter_male_reads_quality.output
    output:
        join(OUT_DIR, 'kmer_fasta', '{sample}.male.fasta.gz')
    log:
        join(OUT_DIR, 'Logs', '{sample}.male_kmer_fasta.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.male_kmer_fasta.benchmark.tsv')
    message: 
        """--- filtering at a minimum frequency of 5, and production of the short‐read male fasta file """
    conda:
        'envs/Yfinder.yml'
    shell:
        'jellyfish dump'
                ' --lower-count=5'
                ' {input.mJelly} |'
                ' gzip -c >'
                ' {output}'
                ' 2> {log}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule male_bitarray:
    input:
        trace = expand(join(OUT_DIR, 'kmer_fasta', '{sample}.male.fasta.gz'), sample = male_SAMPLES)
    output:
        join(OUT_DIR, 'Bitarray', 'male.trace.gz')
    log:
        join(OUT_DIR, 'Logs', 'male_bitarray.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'male_bitarray.benchmark.tsv')
    message: 
        """--- production of the bit‐array representing the male k‐mers """
    conda:
        'envs/Yfinder.yml'
    shell:
        'cp ' + join(OUT_DIR, 'kmer_fasta', '*.male.fasta.gz') + ' male.fasta.gz'
        ' && YGS.pl'
                ' kmer_size=15'
                ' mode=trace'
                ' trace=male.fasta.gz'
                ' > {log} 2>&1'
                ' && mv male.trace.gz {output}'
                ' && rm male.fasta.gz'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule RepeatMasker:
    input:
        dna = genome
    output:
        gff = join(OUT_DIR, 'genome', os.path.basename(genome) + '.out.gff'),
        masked = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked')
    log:
        join(OUT_DIR, 'Logs', 'RepMask.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'RepMask_benchmark.tsv')
    message:
        "--- Running RepeatMasker."
    threads:
        8
    resources:
        mem_mb = 16000
    conda:
        "envs/Yfinder.yml"
    params:
        mode = config["repeatmasker"]["mode"],
        lib = config["repeatmasker"].get("lib", ""),
        species = config["repeatmasker"].get("species", ""),
        outdir = join(OUT_DIR, 'genome'),
        extra = lambda wildcards: (
            f"-lib {config['repeatmasker']['lib']}"
            if config["repeatmasker"]["mode"] == "lib"
            else f"-species {config['repeatmasker']['species']}"
        )
    shell:
        "RepeatMasker"
        " -pa {threads}"
        " -q"
        " -nolow"
        " {params.extra}"
        " -a"
        " -lcambig"
        " -dir {params.outdir}"
        " -html"
        " -gff"
        " -u"
        " {input.dna}"
        " > {log} 2>&1"

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule genome_kmers:
    input:
        assembly = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked')
    output:
        pbBitarray = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked.gen_rep.gz'),
        ctg = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked.ctg_rep.gz'),
        contigResult = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked.contig_result')
    log:
        join(OUT_DIR, 'Logs','genome_kmers.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks','genome_kmers.benchmark.tsv')
    message: 
        """--- production of the bit‐array representing repetitive k-mers of the genome  """
    conda:
        'envs/Yfinder.yml'
    shell:
        'YGS.pl'
                ' kmer_size=15'
                ' mode=contig'
                ' contig={input.assembly}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule final_run:
    input:
        femTrace = join(OUT_DIR, 'Bitarray', 'female.trace.gz'),
        genomeKmers = rules.genome_kmers.output.pbBitarray,
        maleTrace = join(OUT_DIR, 'Bitarray', 'male.trace.gz'),
        assembly = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked')
    output:
        finalResult = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked_female_male.final_result')
    log:
        join(OUT_DIR, 'Logs','final_run.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks','final_run.benchmark.tsv')
    message: 
        """--- final YGS run  """
    conda:
        'envs/Yfinder.yml'
    shell:
        ' cp {input.femTrace} .'
        ' && cp {input.maleTrace} .'
        ' && cp {input.genomeKmers} gen_rep.gz'
        ' && YGS.pl'
                ' kmer_size=15'
                ' mode=final_run'
                ' contig={input.assembly}'
                ' trace=female.trace.gz'
                ' male_trace=male.trace.gz'
                ' gen_rep=gen_rep.gz'
        ' > {log} 2>&1'
        ' && rm female.trace.gz male.trace.gz gen_rep.gz'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule ygs_final_result_to_tsv:
    """
    Parse YGS.pl final result text into a clean TSV.

    Input:  {prefix}.final_result
    Output: {prefix}.final_result.tsv
    """
    input:
        join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked_female_male.final_result')
    output:
        join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked_female_male.final_result.tsv')
    message:
        "Converting {input} -> {output}"
    run:
        import re

        in_path = str(input[0])
        out_path = str(output[0])

        with open(in_path, "r", errors="ignore") as f:
            lines = f.readlines()

        # Find the header line (starts at line 33 in file)
        hdr_idx = None
        for i, line in enumerate(lines):
            if re.match(r"\s*GI\s+", line):
                hdr_idx = i
                break
        if hdr_idx is None:
            raise RuntimeError("Could not locate header line beginning with 'GI'.")

        header_raw = lines[hdr_idx].strip()
        header_cols = re.split(r"\s+", header_raw)

        # Locate columns we need for calculation
        try:
            sc_k_i  = header_cols.index("SC_K")
            vsc_k_i = header_cols.index("VSC_K")
        except ValueError as e:
            raise RuntimeError("Required columns SC_K and/or VSC_K not found in header.") from e

        # Prepare output header: same header + new column at the end
        out_header = header_cols + ["P_VCK_K"]

        rows = []
        # Data lines follow the header; they begin with '>' and have space-separated columns
        for line in lines[hdr_idx + 1:]:
            s = line.strip()
            if not s:
                continue
            if not s.startswith(">"):
                # stop reading table when the section ends
                # (or continue if your files sometimes interleave comments)
                if re.match(r"^\d+\s+contigs\.", s, flags=re.I) or s.lower().startswith("processing contig"):
                    break
                # skip non-table lines after the header
                continue

            parts = re.split(r"\s+", s)
            # Remove leading '>' from contig (GI) name (requirement #1)
            parts[0] = parts[0].lstrip(">")

            # Compute P_VCK_K = 100 * (VSC_K / SC_K) (requirement #3)
            try:
                sc_k  = float(parts[sc_k_i])
                vsc_k = float(parts[vsc_k_i])
                pvck  = 0.0 if sc_k == 0 else round(100.0 * (vsc_k / sc_k), 1)
            except Exception:
                pvck = ""

            # Ensure we only output as many columns as header, then append the new one
            # (some tools can occasionally add trailing spaces)
            parts = parts[:len(header_cols)]
            parts_out = parts + [str(pvck)]

            rows.append(parts_out)

        # Write as TSV with single tabs (requirement #2)
        with open(out_path, "w") as out:
            out.write("\t".join(out_header) + "\n")
            for r in rows:
                out.write("\t".join(r) + "\n")


##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule bt2_index:
    input:
        masked = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked')
    output: 
        index = join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked.rev.1.bt2')
    log:
        join(OUT_DIR, 'Logs', 'bt2_index.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', 'bt2_index.benchmark.tsv')
    message: 
        """--- building bowtie2 index  """
    conda:
        'envs/Yfinder.yml'
    shell:
        'bowtie2-build '
        ' {input.masked} ' + join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked') +
        ' > {log} 2>&1'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule bowtie2_female:
    input:
        fastq1 = join(OUT_DIR, 'female_trimmed_reads', '{sample}.R1.fastq.gz'),
        fastq2 = join(OUT_DIR, 'female_trimmed_reads', '{sample}.R2.fastq.gz'),
        index = rules.bt2_index.output.index
    output: 
        bam = join(OUT_DIR, 'Bowtie2', '{sample}.female.csorted.bowtie2.bam')
    log:
        join(OUT_DIR, 'Logs', '{sample}.female.bowtie2.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.female.benchmark.tsv')
    message: 
        """--- Mapping {wildcards.sample} female reads with Bowtie2."""
    conda:
        'envs/Yfinder.yml'
    shell: 
        '(bowtie2'                                     
                ' -p 8'   
                ' -x ' + join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked') +                    
                ' -1 {input.fastq1}'
                ' -2 {input.fastq2}'
                ') 2> {log}'
                ' | samtools sort -@ 8 -o {output.bam} -'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule qualiMap_female:
    input:
        bam = join(OUT_DIR, 'Bowtie2', '{sample}.female.csorted.bowtie2.bam')
    output: 
        bamqc = join(OUT_DIR, 'Bowtie2', '{sample}.female_bamqc', 'genome_results.txt')
    log:
        join(OUT_DIR, 'Logs', '{sample}.female_bamqc.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.female_bamqc_benchmark.tsv')
    message: 
        """--- Evaluating mapping quality with QualiMap for female {wildcards.sample} sample ."""
    resources:
        mem_mb=32000
    conda:
        'envs/Yfinder.yml'
    shell:
        'qualimap bamqc'
            ' -bam {input.bam}'
            ' -c'
            ' -outdir ' + join(OUT_DIR, 'Bowtie2', '{wildcards.sample}.female_bamqc') +
            ' --java-mem-size=32G'
            ' -nt 8'
            ' > {log} 2>&1'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule bowtie2_male:
    input:
        fastq1 = join(OUT_DIR, 'male_trimmed_reads', '{sample}.R1.fastq.gz'),
        fastq2 = join(OUT_DIR, 'male_trimmed_reads', '{sample}.R2.fastq.gz'),
        index = rules.bt2_index.output.index
    output: 
        bam = join(OUT_DIR, 'Bowtie2', '{sample}.male.csorted.bowtie2.bam')
    log:
        join(OUT_DIR, 'Logs', '{sample}.male.bowtie2.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.male.benchmark.tsv')
    message: 
        """--- Mapping {wildcards.sample} male reads with Bowtie2."""
    conda:
        'envs/Yfinder.yml'
    shell: 
        '(bowtie2'                                     
                ' -p 8'   
                ' -x ' + join(OUT_DIR, 'genome', os.path.basename(genome) + '.masked') +                    
                ' -1 {input.fastq1}'
                ' -2 {input.fastq2}'
                ') 2> {log}'
                ' | samtools sort -@ 8 -o {output.bam} -'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule qualiMap_male:
    input:
        bam = join(OUT_DIR, 'Bowtie2', '{sample}.male.csorted.bowtie2.bam')
    output: 
        bamqc = join(OUT_DIR, 'Bowtie2', '{sample}.male_bamqc', 'genome_results.txt')
    log:
        join(OUT_DIR, 'Logs', '{sample}.male_bamqc.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.male_bamqc_benchmark.tsv')
    message: 
        """--- Evaluating mapping quality with QualiMap for male {wildcards.sample} sample ."""
    resources:
        mem_mb=32000
    conda:
        'envs/Yfinder.yml'
    shell:
        'qualimap bamqc'
            ' -bam {input.bam}'
            ' -c'
            ' -outdir ' + join(OUT_DIR, 'Bowtie2', '{wildcards.sample}.male_bamqc') +
            ' --java-mem-size=32G'
            ' -nt 8'
            ' > {log} 2>&1'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule coverage_female:
    input:
        bam = rules.bowtie2_female.output.bam
    output: 
        bcov = join(OUT_DIR, 'Bowtie2', '{sample}.female.coverage.txt')
    log:
        join(OUT_DIR, 'Logs', '{sample}.female.coverage.log')
    benchmark:
        join(OUT_DIR, 'Benchmarks', '{sample}.female.coverage.benchmark.tsv')
    message: 
        """--- Generating coverage histograms for female {wildcards.sample} with bedtools."""
    conda:
        'envs/Yfinder.yml'
    shell: 
        'genomeCoverageBed'
                ' -ibam {input.bam}'
                # ' -max 50'
                ' > {output.bcov}'
                ' 2> {log}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule coverage_male:
    input:
        bam = rules.bowtie2_male.output.bam
    output: 
        bcov = join(OUT_DIR, 'Bowtie2', '{sample}.male.coverage.txt')
    log:
        join(OUT_DIR, 'Bowtie2', '{sample}.male.coverage.log')
    benchmark:
        join(OUT_DIR, 'Bowtie2', '{sample}.male.coverage.benchmark.tsv')
    message: 
        """--- Generating coverage histograms for male {wildcards.sample} with bedtools."""
    conda:
        'envs/Yfinder.yml'
    shell: 
        'genomeCoverageBed'         
                ' -ibam {input.bam}'   
                # ' -max 50'
                ' > {output.bcov}'
                ' 2> {log}'

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule qualimap_cov_per_contig_female:
    """
    Pull the 'Coverage per contig' section from Qualimap genome_results.txt
    and write a clean TSV: GI, MEAN_COV, STD_COV
    """
    input:
        qm = join(OUT_DIR, "Bowtie2", "{sample}.female_bamqc", "genome_results.txt")
    output:
        tsv = join(OUT_DIR, "Bowtie2", "{sample}.female_bamqc", "coverage_per_contig.tsv")
    message:
        "Extracting per-contig coverage from {input.qm} -> {output.tsv}"
    run:
        import re

        def parse_cov(path):
            rows = []
            with open(path, "r", errors="ignore") as fh:
                lines = fh.readlines()

            # Find the section header (robust to >> count / spacing / case)
            start = None
            for i, line in enumerate(lines):
                if re.search(r"coverage per contig", line, flags=re.I):
                    start = i
                    break
            if start is None:
                return rows  # empty

            # Skip optional blank lines and optional header row
            j = start + 1
            while j < len(lines) and not lines[j].strip():
                j += 1

            # If the next line looks like a header (contains 'mean' and 'std'), skip it
            if j < len(lines) and re.search(r"mean", lines[j], flags=re.I) and re.search(r"std", lines[j], flags=re.I):
                j += 1

            # Read data lines until a blank line or next section
            while j < len(lines):
                s = lines[j].rstrip("\n")
                j += 1
                if not s.strip():
                    break
                if s.strip().startswith(">"):
                    # next section in Qualimap also starts with >>>>>>
                    break

                # Collapse funny spaces/tabs
                parts = re.split(r"\t+|\s{2,}|\s+", s.strip())
                if len(parts) < 3:
                    continue

                gi = parts[0].lstrip(">")
                mean_cov = parts[-2]
                std_cov  = parts[-1]

                # Try to normalize to numeric strings with a few decimals when possible
                def f3(x):
                    try:
                        return f"{float(x):.3f}"
                    except Exception:
                        return x
                rows.append((gi, f3(mean_cov), f3(std_cov)))

            return rows

        rows = parse_cov(input.qm)

        with open(output.tsv, "w") as out:
            out.write("GI\tMEAN_COV\tSTD_COV\n")
            for gi, mean_cov, std_cov in rows:
                out.write(f"{gi}\t{mean_cov}\t{std_cov}\n")

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule qualimap_cov_per_contig_male:
    """
    Pull the 'Coverage per contig' section from Qualimap genome_results.txt
    and write a clean TSV: GI, MEAN_COV, STD_COV
    """
    input:
        qm = join(OUT_DIR, "Bowtie2", "{sample}.male_bamqc", "genome_results.txt")
    output:
        tsv = join(OUT_DIR, "Bowtie2", "{sample}.male_bamqc", "coverage_per_contig.tsv")
    message:
        "Extracting per-contig coverage from {input.qm} -> {output.tsv}"
    run:
        import re

        def parse_cov(path):
            rows = []
            with open(path, "r", errors="ignore") as fh:
                lines = fh.readlines()

            # Find the section header (robust to >> count / spacing / case)
            start = None
            for i, line in enumerate(lines):
                if re.search(r"coverage per contig", line, flags=re.I):
                    start = i
                    break
            if start is None:
                return rows  # empty

            # Skip optional blank lines and optional header row
            j = start + 1
            while j < len(lines) and not lines[j].strip():
                j += 1

            # If the next line looks like a header (contains 'mean' and 'std'), skip it
            if j < len(lines) and re.search(r"mean", lines[j], flags=re.I) and re.search(r"std", lines[j], flags=re.I):
                j += 1

            # Read data lines until a blank line or next section
            while j < len(lines):
                s = lines[j].rstrip("\n")
                j += 1
                if not s.strip():
                    break
                if s.strip().startswith(">"):
                    # next section in Qualimap also starts with >>>>>>
                    break

                # Collapse funny spaces/tabs
                parts = re.split(r"\t+|\s{2,}|\s+", s.strip())
                if len(parts) < 3:
                    continue

                gi = parts[0].lstrip(">")
                mean_cov = parts[-2]
                std_cov  = parts[-1]

                # Try to normalize to numeric strings with a few decimals when possible
                def f3(x):
                    try:
                        return f"{float(x):.3f}"
                    except Exception:
                        return x
                rows.append((gi, f3(mean_cov), f3(std_cov)))

            return rows

        rows = parse_cov(input.qm)

        with open(output.tsv, "w") as out:
            out.write("GI\tMEAN_COV\tSTD_COV\n")
            for gi, mean_cov, std_cov in rows:
                out.write(f"{gi}\t{mean_cov}\t{std_cov}\n")

##--------------------------------------------------------------------------------------##
##--------------------------------------------------------------------------------------##

rule multiQC:
    input:
        expand(join(OUT_DIR, 'Bowtie2', '{sample}.female_bamqc', 'genome_results.txt'), sample = female_SAMPLES),
        expand(join(OUT_DIR, 'Bowtie2', '{sample}.male_bamqc', 'genome_results.txt'), sample = male_SAMPLES),
        expand(join(OUT_DIR, 'Bowtie2', '{sample}.male.coverage.txt'), sample = male_SAMPLES),
        expand(join(OUT_DIR, 'Bowtie2', '{sample}.female.coverage.txt'), sample = female_SAMPLES)
    output:
        file = join(OUT_DIR, 'MultiQC', 'multiqc_report.html')
    log:
        join(OUT_DIR, 'MultiQC', 'multiQC.log')
    benchmark:
        join(OUT_DIR, 'MultiQC', 'multiQC.benchmark.tsv')
    message: 
        """--- Running MultiQC """
    conda:
        'envs/Yfinder.yml'
    shell:
        'ls -1 ' + join(OUT_DIR) + '/Logs/*.bowtie2.log > ' + join(OUT_DIR, 'MultiQC', 'summary_files.txt') + ' && ' +
        'ls -1 ' + join(OUT_DIR) + '/Bowtie2/*_bamqc | grep ":" | sed "s/://g" >> ' + join(OUT_DIR, 'MultiQC', 'summary_files.txt') + ' && ' +
        'multiqc'
                ' -f'
                ' -o ' + join(OUT_DIR, 'MultiQC') + ' -d -dd 1 -l ' + join(OUT_DIR, 'MultiQC', 'summary_files.txt') +
                ' > {log} 2>&1'
